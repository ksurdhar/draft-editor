import Mongoose, { Document, Model } from 'mongoose'

// Mongo Init Code
if (!global.db) {
  const MONGO_DB = process.env.MOCK_AUTH === 'true' 
  ? 'mongodb://localhost:27017/whetstone'
  : `mongodb+srv://${process.env.DB_USER}:${process.env.DB_PASS}@${process.env.DB_CLUSTER}.mongodb.net/${process.env.DB_NAME}?retryWrites=true&w=majority`
  Mongoose.set('strictQuery', true)
  Mongoose.connect(MONGO_DB)
  global.db = Mongoose.connection
}
global.db.on('error', console.error.bind(console, 'connection error: '))
global.db.once('open', () => {
  console.log('Connected successfully')  
})

const DocumentSchema = new Mongoose.Schema({
  title: {
    type: Mongoose.Schema.Types.String,
    default: '',
  },
  content: {
    type: Mongoose.Schema.Types.Mixed,
    default: {
      type: 'doc',
      content: [{
        type: 'paragraph',
        content: [{ type: 'text', text: '' }]
      }]
    }
  },
  comments: {
    type: [{ 
      content: Mongoose.Schema.Types.String, 
      id: Mongoose.Schema.Types.String,
      timestamp: Mongoose.Schema.Types.Number
    }],
    default: []
  },
  userId: {
    type: Mongoose.Schema.Types.String,
    required: true
  },
  lastUpdated: {
    type: Mongoose.Schema.Types.Number,
    default: Date.now()
  },
  parentId: {
    type: Mongoose.Schema.Types.String,
    default: 'root'
  },
  folderIndex: {
    type: Mongoose.Schema.Types.Number,
    default: 0
  }
})

const PermissionSchema = new Mongoose.Schema({
  documentId: {
    type: Mongoose.Schema.Types.String,
    default: '',
  },
  ownerId: {
    type: Mongoose.Schema.Types.String,
    default: '',
  },
  globalPermission: {
    type: Mongoose.Schema.Types.String,
    default: '',
  },
  users: {
    type: [{ 
      email: Mongoose.Schema.Types.String, 
      permission: Mongoose.Schema.Types.String
    }],
    default: []
  },
})

const VersionSchema = new Mongoose.Schema({
  documentId: {
    type: Mongoose.Schema.Types.String,
    required: true
  },
  ownerId: {
    type: Mongoose.Schema.Types.String,
    required: true
  },
  name: {
    type: Mongoose.Schema.Types.String,
    default: '',
  },
  createdAt: {
    type: Mongoose.Schema.Types.Number,
    default: Date.now()
  },
  autoGenerated: {
    type: Mongoose.Schema.Types.Boolean,
    default: true
  },
  wordCount: {
    type: Mongoose.Schema.Types.Number,
    default: 0
  },
  content: {
    type: Mongoose.Schema.Types.String,
    default: '',
  },
})

// replaces _id with id and removes versionKey when converted to json
DocumentSchema.set('toJSON', {
  virtuals: true,
  versionKey: false,
  transform: function (doc, ret) { 
    ret.id = ret._id.toString()
    delete ret._id
  }
})

PermissionSchema.set('toJSON', {
  virtuals: true,
  versionKey: false,
  transform: function (doc, ret) { 
    ret.id = ret._id.toString()
    delete ret._id
  }
})

VersionSchema.set('toJSON', {
  virtuals: true,
  versionKey: false,
  transform: function (doc, ret) { 
    ret.id = ret._id.toString()
    delete ret._id
  }
})

// Add a new schema for folders
const FolderSchema = new Mongoose.Schema({
  title: {
    type: Mongoose.Schema.Types.String,
    required: true
  },
  parentId: {
    type: Mongoose.Schema.Types.String,
    default: 'root'
  },
  userId: {
    type: Mongoose.Schema.Types.String,
    required: true
  },
  lastUpdated: {
    type: Mongoose.Schema.Types.Number,
    default: Date.now()
  },
  folderIndex: {
    type: Mongoose.Schema.Types.Number,
    default: 0
  }
})

// Add toJSON for FolderSchema
FolderSchema.set('toJSON', {
  virtuals: true,
  versionKey: false,
  transform: function (doc, ret) { 
    ret.id = ret._id.toString()
    delete ret._id
  }
})

export interface IDoc {
  title: string
  content: {
    type: 'doc'
    content: Array<{
      type: string
      content?: any[]
      text?: string
      marks?: Array<{ type: string }>
    }>
  }
  comments: Array<{
    content: string
    id: string
    timestamp: number
  }>
  userId: string
  lastUpdated: number
  parentId: string
  folderIndex: number
}

export interface IDocDocument extends IDoc, Document {}
export interface IDocModel extends Model<IDocDocument> {}
export const Doc = Mongoose.models && Mongoose.models.Document || Mongoose.model<IDocDocument>('Document', DocumentSchema) 

export interface IPermission {
  globalPermission: string
  users: string[] // not quite true
  ownerId: string
  documentId: string
}
export interface IPermissionDocument extends IPermission, Document {}
export interface IPermissionModel extends Model<IPermissionDocument> {}
export const Permission = Mongoose.models && Mongoose.models.Permission || Mongoose.model<IPermissionDocument>('Permission', PermissionSchema) 

export interface IVersion {
  ownerId: string
  documentId: string
  name: string
  createdAt: number
  autoGenerated: boolean
  wordCount: number
  content: string
}
export interface IVersionDocument extends IVersion, Document {}
export interface IVersionModel extends Model<IVersionDocument> {}
export const Version = Mongoose.models && Mongoose.models.Version || Mongoose.model<IVersionDocument>('Version', VersionSchema) 

// Add Folder interfaces
export interface IFolder {
  title: string
  parentId: string
  userId: string
  lastUpdated: number
  folderIndex: number
}
export interface IFolderDocument extends IFolder, Document {}
export interface IFolderModel extends Model<IFolderDocument> {}

export const Folder = Mongoose.models && Mongoose.models.Folder || Mongoose.model<IFolderDocument>('Folder', FolderSchema) 
