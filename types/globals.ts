// globals.d.ts
declare global {
  interface Window {
    env: any
  }
}

export {}

export type DocumentData = {
  _id: string
  id: string // Added for compatibility with frontend
  title: string
  content: string // Changed to string for stringified JSON
  comments: CommentData[]
  lastUpdated: number
  userId: string
  canEdit?: boolean
  canComment?: boolean
  parentId?: string | 'root' // ID of the parent folder, 'root' means root level
  folderIndex: number // Position within the parent folder, lower numbers appear first
  hash?: string // Added for content-based sync
}

export type CommentData = {
  id: string
  timestamp: number
  content: string
}

export type ShareUser = {
  email: string
  permission: UserPermission
}

export type PermissionData = {
  documentId: string
  ownerId: string
  globalPermission: UserPermission
  users: ShareUser[]
}

export interface VersionData {
  id: string
  documentId: string
  ownerId: string
  content: string // Changed to string for stringified JSON
  createdAt: number
  name?: string
  autoGenerated?: boolean
  wordCount?: number
  hash?: string // Added for content-based sync
}

export enum UserPermission {
  View = 'View',
  Comment = 'Comment',
  Edit = 'Edit',
  None = 'None',
}

export type AnimationState = 'Active' | 'Complete' | 'Inactive'

export type FolderData = {
  _id: string
  id?: string // Added for compatibility with frontend
  title: string
  parentId?: string | 'root' // ID of the parent folder, 'root' means root level
  userId: string
  lastUpdated: number
  folderIndex: number // Position within the parent folder, lower numbers appear first
  hash?: string // Added for content-based sync
}

// Conversation and Character interfaces moved from conversation components
export interface TiptapMark {
  type: string
  attrs?: Record<string, any>
}

export interface TiptapNode {
  type: string
  content?: TiptapNode[]
  text?: string
  marks?: TiptapMark[]
  attrs?: Record<string, any>
}

export interface CharacterData {
  _id: string
  name: string
  motivation: string
  description: string
  traits: string[]
  relationships?: Array<{
    characterId: string
    relationshipType: string
    description: string
  }>
  userId?: string
  documentIds?: string[]
  lastUpdated?: number
  isArchived?: boolean
}

export interface DialogueEntry {
  characterId: string
  characterName: string
  documentId?: string
  documentTitle?: string
  contentNode: TiptapNode
}

export interface ConversationGroup {
  conversationId: string
  conversationName: string | null
  documentId: string
  documentTitle: string
  entries: DialogueEntry[]
  lastUpdated?: number
}

export interface SyncUpdates {
  documents?: any[]
  folders?: any[]
  characters?: CharacterData[]
}
